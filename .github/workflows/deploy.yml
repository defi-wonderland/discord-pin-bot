name: Deploy Discord Pin Bot

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY: discord-pin-bot
  ECS_CLUSTER: discord-pin-bot-cluster
  ECS_SERVICE: discord-pin-bot-service
  CONTAINER_NAME: discord-pin-bot

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
    - uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Create ECR repository if not exists
      run: |
        aws ecr describe-repositories --repository-names ${ECR_REPOSITORY} || \
        aws ecr create-repository --repository-name ${ECR_REPOSITORY}

    - name: Build and push image to ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG} .
        docker push ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}

    - name: Create ECS cluster if not exists
      run: |
        aws ecs describe-clusters --clusters ${ECS_CLUSTER} || \
        aws ecs create-cluster --cluster-name ${ECS_CLUSTER}

    - name: Deploy to ECS
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Register task definition
        aws ecs register-task-definition \
          --family discord-pin-bot \
          --requires-compatibilities FARGATE \
          --network-mode awsvpc \
          --cpu 256 \
          --memory 512 \
          --container-definitions "[{\"name\":\"${CONTAINER_NAME}\",\"image\":\"${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}\",\"essential\":true,\"environment\":[{\"name\":\"DISCORD_TOKEN\",\"value\":\"${{ secrets.DISCORD_TOKEN }}\"}],\"logConfiguration\":{\"logDriver\":\"awslogs\",\"options\":{\"awslogs-group\":\"/ecs/discord-pin-bot\",\"awslogs-region\":\"${AWS_REGION}\",\"awslogs-stream-prefix\":\"ecs\"}}}]"

        # Create or update service
        if aws ecs describe-services --cluster ${ECS_CLUSTER} --services ${ECS_SERVICE} | grep "MISSING"; then
          aws ecs create-service \
            --cluster ${ECS_CLUSTER} \
            --service-name ${ECS_SERVICE} \
            --task-definition discord-pin-bot \
            --desired-count 1 \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[${{ vars.AWS_SUBNET_ID }}],securityGroups=[${{ vars.AWS_SECURITY_GROUP_ID }}],assignPublicIp=ENABLED}"
        else
          aws ecs update-service \
            --cluster ${ECS_CLUSTER} \
            --service ${ECS_SERVICE} \
            --task-definition discord-pin-bot \
            --force-new-deployment
        fi